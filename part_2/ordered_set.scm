(define (element-of-set? set x)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? (cdr set) x))
  )
)

(define (intersection-set s1 s2)
  (if (or (null? s1) (null? s2))
      '()
      (let ((x1 (car s1)) (x2 (car s2)))
        (cond ((= x1 x2) (cons x1 (intersection-set (cdr s1) (cdr s2))))
              ((< x1 x2) (intersection-set (cdr s1) s2))
              (else (intersection-set s1 (cdr s2)))
        )
      )
  )
)

(define (adjoin-set set x)
  (cond ((null? set) (list x))
        ((= x (car set)) set)
        ((< x (car set)) (cons x set))
        (else (cons (car set) (adjoin-set (cdr set)  x)))
  )
)

(define (union-set s1 s2)
  (cond ((null? s1) s2)
        ((null? s2) s1)
        (else
          (let ((x1 (car s1)) (x2 (car s2)))
            (cond ((= x1 x2) (cons x1 (union-set (cdr s1) (cdr s2))))
                  ((< x1 x2) (cons x1 (union-set (cdr s1) s2)))
                  (else (cons x2 (union-set s1 (cdr s2))))
            )
          )
        )
  )
)
