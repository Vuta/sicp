(define (good-enough? x y) (< (abs (- x y)) 0.001))
(define (average x y)
  (/ (+ x y) 2.0)
)

(define (search f neg pos)
  (let ((mid (average neg pos)))
    (if (good-enough? neg pos)
        mid
        (let ((test-value (f mid)))
          (cond ((> test-value 0) (search f neg mid))
                ((< test-value 0) (search f mid pos))
                (else mid)
          )
        )
    )
  )
)

(define (half-interval f a b)
  (let ((a-value (f a))
        (b-value (f b)))
    (cond ((and (< a-value 0) (> b-value 0)) (search f a b))
          ((and (< b-value 0) (> a-value 0)) (search f b a))
          (else (error "Values are not of opposite sign" a b))
    )
  )
)

(half-interval (lambda (x) (- (* x x) 2)) 1 3)
(half-interval (lambda (x) (- (* x x) 2)) 2 3)
(half-interval sin 2.0 4.0)
